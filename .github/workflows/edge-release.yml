name: Update rolling "Microsoft Edge" release (MSI attached)

on:
  schedule:
    - cron: "17 */4 * * *"   # every 4 hours
  workflow_dispatch: {}

jobs:
  update:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Fetch Edge Updates API
        run: |
          set -e
          curl -fsSL "https://edgeupdates.microsoft.com/api/products?view=enterprise" > edge.json

      - name: Find latest Stable Windows x64 version + MSI URL
        id: parse
        run: |
          set -e
          VERSION=$(jq -r '
            .[] | select(.Product=="Stable")
            | .Releases[]? | .ProductVersion
          ' edge.json | sort -V | tail -n1)

          test -n "$VERSION" && [ "$VERSION" != "null" ] || { echo "No version found"; exit 1; }

          # Try common shape: Releases[].Artifacts[]
          MSI_URL=$(jq -r --arg VER "$VERSION" '
            .[] | select(.Product=="Stable")
            | .Releases[]? | select(.ProductVersion==$VER)
            | .Artifacts[]?
            | select((.Platform // "" | ascii_downcase)=="windows"
                     and (.Architecture // "" | ascii_downcase)=="x64"
                     and (.InstallerType // "" | ascii_downcase)=="msi")
            | .Location
          ' edge.json | head -n1)

          # Fallback: Releases[].Platforms[].Artifacts[]
          if [ -z "$MSI_URL" ]; then
            MSI_URL=$(jq -r --arg VER "$VERSION" '
              .[] | select(.Product=="Stable")
              | .Releases[]? | select(.ProductVersion==$VER)
              | .Platforms[]?
              | select((.Platform // "" | ascii_downcase)=="windows"
                       and (.Architecture // "" | ascii_downcase)=="x64")
              | .Artifacts[]?
              | select((.InstallerType // "" | ascii_downcase)=="msi")
              | .Location
            ' edge.json | head -n1)
          fi

          test -n "$MSI_URL" || { echo "No MSI URL found for $VERSION"; exit 1; }

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "msi_url=$MSI_URL" >> $GITHUB_OUTPUT

      - name: Stop if version unchanged (optional but recommended)
        run: |
          set -e
          curl -fsSL -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/Edge" > current.json
          LAST=$(jq -r '.body | capture("Version:\\s*(?<v>[0-9.]+)")?.v // empty' current.json)
          echo "Current release shows: $LAST"
          if [ "$LAST" = "${{ steps.parse.outputs.version }}" ]; then
            echo "No new version. Exiting."
            exit 78
          fi

      - name: Download MSI from Microsoft
        run: |
          set -e
          mkdir -p out
          cd out
          # filename matches Microsoftâ€™s typical artifact name
          curl -fL --retry 5 --retry-delay 2 \
            -o MicrosoftEdgeEnterpriseX64.msi \
            "${{ steps.parse.outputs.msi_url }}"
          ls -lh MicrosoftEdgeEnterpriseX64.msi
          sha256sum MicrosoftEdgeEnterpriseX64.msi | tee SHA256.txt

      - name: Update rolling release (tag: Edge) with MSI
        uses: ncipollo/release-action@v1
        with:
          tag: Edge
          name: Microsoft Edge        # keep the title constant
          body: |
            Channel: Stable
            Platform: Windows x64
            Version: ${{ steps.parse.outputs.version }}

            This private release includes the Microsoft Edge MSI attached for deployment.
          allowUpdates: true
          replacesArtifacts: true
          artifacts: |
            out/MicrosoftEdgeEnterpriseX64.msi,
            out/SHA256.txt
          draft: false
          prerelease: false
