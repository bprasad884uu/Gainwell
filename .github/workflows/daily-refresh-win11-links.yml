name: Refresh Win11 ISO links (24h15m drift)

on:
  schedule:
    - cron: '*/30 * * * *'   # poll every 30 minutes
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  refresh-links:
    runs-on: windows-latest
    steps:

      - name: Checkout main
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine whether to run now (gate by next_run file)
        id: gate
        shell: pwsh
        run: |
          $epochFile = Join-Path $env:GITHUB_WORKSPACE '.github/next_run_epoch'
          $intervalSeconds = 87300   # 24h 15m

          $unixEpochStart = (Get-Date "1970-01-01T00:00:00Z").ToUniversalTime()
          $now = (Get-Date).ToUniversalTime()
          $nowEpoch = [int][Math]::Floor(($now - $unixEpochStart).TotalSeconds)
          Write-Host "Now (UTC epoch): $nowEpoch"

          if (Test-Path $epochFile) {
            $existing = (Get-Content $epochFile -Raw).Trim()
            if ($existing -match '^\d+$') {
              $nextEpoch = [int]$existing
            } else {
              $nextEpoch = 0
            }
          } else {
            $nextEpoch = 0
          }

          Write-Host "Next scheduled epoch: $nextEpoch"

          if ($nowEpoch -ge $nextEpoch) {
            Write-Host "=== It's time to run ==="
            if ($nextEpoch -eq 0) {
              $newNext = $nowEpoch + $intervalSeconds
            } else {
              $newNext = $nextEpoch
              while ($newNext -le $nowEpoch) {
                $newNext += $intervalSeconds
              }
            }
            Add-Content -Path $env:GITHUB_OUTPUT -Value "should_run=true"
            Add-Content -Path $env:GITHUB_OUTPUT -Value "next_epoch=$newNext"
          } else {
            Write-Host "Not time yet â€” skipping."
            Add-Content -Path $env:GITHUB_OUTPUT -Value "should_run=false"
            Add-Content -Path $env:GITHUB_OUTPUT -Value "next_epoch=$nextEpoch"
          }

      - name: Download link-generator script
        if: steps.gate.outputs.should_run == 'true'
        shell: pwsh
        run: |
          curl -fsSL -o Win11OSLinkGenerate.ps1 https://raw.githubusercontent.com/bprasad884uu/Gainwell/refs/heads/main/Win11OSLinkGenerate.ps1
          Write-Host "Downloaded Win11OSLinkGenerate.ps1"

      - name: Run generator and capture output
        if: steps.gate.outputs.should_run == 'true'
        id: gen
        shell: pwsh
        run: |
          # Run generator and capture stdout lines
          $out = pwsh -NoProfile -ExecutionPolicy Bypass -File ./Win11OSLinkGenerate.ps1 2>&1
          $out | ForEach-Object { Write-Host $_ }

          # Capture exact lines that start with http(s) (full URL lines)
          $lines = $out | ForEach-Object { $_.Trim() }
          $urls = $lines | Where-Object { $_ -match '^(https?://)' } | ForEach-Object { $_.Trim() }

          Write-Host "=== Extracted URLs ==="
          $urls | ForEach-Object { Write-Host "  $_" }

          # Map first to en-GB, second to en-US if present
          $enGB = $null; $enUS = $null
          if ($urls.Count -ge 1) { $enGB = $urls[0] }
          if ($urls.Count -ge 2) { $enUS = $urls[1] }

          # Sanitize (remove stray CR/LF)
          if ($enGB) { $enGB = ($enGB -replace '[\r\n]+','') }
          if ($enUS) { $enUS = ($enUS -replace '[\r\n]+','') }

          # Write outputs safely using single-string heredoc blocks written in one call
          # found (boolean)
          Add-Content -Path $env:GITHUB_OUTPUT -Value ("found=" + ($urls.Count -gt 0)) -Encoding utf8

          # en-GB
          if ($enGB) {
            $block = "engb<<EOF`n$enGB`nEOF"
            Add-Content -Path $env:GITHUB_OUTPUT -Value $block -Encoding utf8
          } else {
            Add-Content -Path $env:GITHUB_OUTPUT -Value "engb=" -Encoding utf8
          }

          # en-US
          if ($enUS) {
            $block = "enus<<EOF`n$enUS`nEOF"
            Add-Content -Path $env:GITHUB_OUTPUT -Value $block -Encoding utf8
          } else {
            Add-Content -Path $env:GITHUB_OUTPUT -Value "enus=" -Encoding utf8
          }

      - name: Debug workflow outputs
        shell: pwsh
        run: |
          Write-Host "should_run=${{ steps.gate.outputs.should_run }}"
          Write-Host "next_epoch=${{ steps.gate.outputs.next_epoch }}"
          Write-Host "found=${{ steps.gen.outputs.found }}"
          Write-Host "engb=${{ steps.gen.outputs.engb }}"
          Write-Host "enus=${{ steps.gen.outputs.enus }}"

      - name: Replace isoUrl entries in Windows11Upgrade.ps1
        id: replace
        if: steps.gate.outputs.should_run == 'true' && steps.gen.outputs.found == 'true'
        shell: pwsh
        env:
          ENGB: ${{ steps.gen.outputs.engb }}
          ENUS: ${{ steps.gen.outputs.enus }}
        run: |
          $file = Join-Path $Env:GITHUB_WORKSPACE 'Windows11Upgrade.ps1'
          if (-not (Test-Path $file)) { Write-Host "Windows11Upgrade.ps1 not found"; Add-Content -Path $env:GITHUB_OUTPUT -Value "updated=false"; exit 0 }
          $content = Get-Content -Raw -Path $file

          $patternENGB = '(?ms)(if\s*\(\$locale\s*-eq\s*"en-GB"\)\s*\{.*?\$isoUrl\s*=\s*)".*?"'
          $patternENUS = '(?ms)(if\s*\(\$locale\s*-eq\s*"en-US"\)\s*\{.*?\$isoUrl\s*=\s*)".*?"'

          $new = $content
          $updated = $false

          if ($Env:ENGB -and $Env:ENGB.Trim()) {
            $replacement = '${1}"' + $Env:ENGB + '"'
            $attempt = [System.Text.RegularExpressions.Regex]::Replace($new, $patternENGB, $replacement)
            if ($attempt -ne $new) { $new = $attempt; $updated = $true; Write-Host "Inserted en-GB URL" } else { Write-Host "en-GB pattern not found; skipping en-GB" }
          } else {
            Write-Host "No en-GB URL provided; skipping en-GB replacement"
          }

          if ($Env:ENUS -and $Env:ENUS.Trim()) {
            $replacement = '${1}"' + $Env:ENUS + '"'
            $attempt = [System.Text.RegularExpressions.Regex]::Replace($new, $patternENUS, $replacement)
            if ($attempt -ne $new) { $new = $attempt; $updated = $true; Write-Host "Inserted en-US URL" } else { Write-Host "en-US pattern not found; skipping en-US" }
          } else {
            Write-Host "No en-US URL provided; skipping en-US replacement"
          }

          if ($updated) {
            Set-Content -Path $file -Value $new -Force
            Write-Host "Windows11Upgrade.ps1 updated"
            Add-Content -Path $env:GITHUB_OUTPUT -Value "updated=true"
          } else {
            Write-Host "No replacements applied"
            Add-Content -Path $env:GITHUB_OUTPUT -Value "updated=false"
          }

      - name: Commit and push changes (only when updated)
          if: steps.replace.outputs.updated == 'true'
          shell: pwsh
          run: |
            $epochFile = Join-Path $env:GITHUB_WORKSPACE '.github/next_run_epoch'
            $nextEpoch = [int]${{ steps.gate.outputs.next_epoch }}

            if (-not (Test-Path (Split-Path $epochFile))) { New-Item -ItemType Directory -Path (Split-Path $epochFile) -Force | Out-Null }
            Set-Content -Path $epochFile -Value $nextEpoch -Encoding utf8

            git config user.name "github-actions[bot]"
            git config user.email "actions@github.com"

            # Ensure origin uses the token (you already set this earlier; this is safe to repeat)
            git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}

            # Fetch latest remote main
            git fetch origin main

            # Try to rebase local staged changes onto latest origin/main
            # If there are no local commits yet, this will be a no-op.
            try {
              # create a temporary local branch from current HEAD to preserve work
              $tmp = "tmp-action-$(Get-Random)"
              git branch $tmp

              # Make sure we have any staged changes in an explicit commit (so rebase works)
              git add Windows11Upgrade.ps1 .github/next_run_epoch || $true
              $hasStaged = $false
              git diff --cached --quiet
              if ($LASTEXITCODE -ne 0) { $hasStaged = $true }

              if ($hasStaged) {
                git commit -m "Refresh Win11 ISO links (next: $nextEpoch) $(Get-Date -Format 'yyyy-MM-dd HH:mm')"
              } else {
                Write-Host "Nothing staged to commit (unexpected because 'updated' was true)."
              }

              # Rebase onto origin/main
              git rebase origin/main

              # Push the rebased commits
              git push origin HEAD:main

              # cleanup temp branch
              git branch -D $tmp
            } catch {
              Write-Host "Rebase or push failed. Attempting to abort rebase and restore state."
              # try to abort rebase if in progress
              git rebase --abort 2>$null
              # restore branch from temp (if exists)
              try { git checkout -f $tmp; git branch -D $tmp } catch {}
              Write-Error "Failed to rebase/push: $($_.Exception.Message)"
              exit 1
            }

