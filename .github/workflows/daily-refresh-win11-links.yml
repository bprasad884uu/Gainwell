name: Refresh Win11 ISO links (24h15m drift)

on:
  schedule:
    - cron: '*/30 * * * *'   # poll every 30 minutes
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  refresh-links:
    runs-on: windows-latest
    steps:
      - name: Checkout main
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

        - name: Determine whether to run now (gate by next_run file)
          id: gate
          shell: pwsh
          run: |
            $epochFile = Join-Path $env:GITHUB_WORKSPACE '.github/next_run_epoch'
            $intervalSeconds = 87300   # 24h 15m drift

            $unixEpochStart = (Get-Date "1970-01-01T00:00:00Z").ToUniversalTime()
            $now = (Get-Date).ToUniversalTime()
            $nowEpoch = [int][Math]::Floor(($now - $unixEpochStart).TotalSeconds)
            Write-Host "Now (UTC epoch): $nowEpoch"

            if (Test-Path $epochFile) {
              $existing = (Get-Content $epochFile -Raw).Trim()
              if ($existing -match '^\d+$') {
                $nextEpoch = [int]$existing
              } else {
                $nextEpoch = 0
              }
            } else {
              $nextEpoch = 0
            }

            Write-Host "Next scheduled epoch: $nextEpoch"

            if ($nowEpoch -ge $nextEpoch) {
              Write-Host "=== It's time to run ==="
              if ($nextEpoch -eq 0) {
                $newNext = $nowEpoch + $intervalSeconds
              } else {
                $newNext = $nextEpoch
                while ($newNext -le $nowEpoch) {
                  $newNext += $intervalSeconds
                }
              }
              Add-Content -Path $env:GITHUB_OUTPUT -Value "should_run=true"
              Add-Content -Path $env:GITHUB_OUTPUT -Value "next_epoch=$newNext"
            } else {
              Write-Host "Not time yet â€” skipping."
              Add-Content -Path $env:GITHUB_OUTPUT -Value "should_run=false"
              Add-Content -Path $env:GITHUB_OUTPUT -Value "next_epoch=$nextEpoch"
            }

      - name: Download link-generator script
        if: steps.gate.outputs.should_run == 'true'
        run: |
          curl -fsSL -o Win11OSLinkGenerate.ps1 https://raw.githubusercontent.com/bprasad884uu/Gainwell/refs/heads/main/Win11OSLinkGenerate.ps1
          echo "Downloaded Win11OSLinkGenerate.ps1"

      - name: Run generator and capture output
        if: steps.gate.outputs.should_run == 'true'
        id: gen
        shell: pwsh
        run: |
          $out = pwsh -NoProfile -ExecutionPolicy Bypass -File ./Win11OSLinkGenerate.ps1 2>&1
          $out | ForEach-Object { Write-Host $_ }

          $urls = $out | Where-Object { $_ -match '^(https?://)' }

          Write-Host "=== Extracted URLs ==="
          $urls | ForEach-Object { Write-Host $_ }

          $enGB = $null; $enUS = $null
          if ($urls.Count -ge 1) { $enGB = $urls[0].Trim() }
          if ($urls.Count -ge 2) { $enUS = $urls[1].Trim() }

          if ($urls.Count -eq 0) {
            Write-Host "No ISO URLs found in generator output" -ForegroundColor Yellow
            Add-Content -Path $env:GITHUB_OUTPUT -Value "found=false"
            Add-Content -Path $env:GITHUB_OUTPUT -Value "engb="
            Add-Content -Path $env:GITHUB_OUTPUT -Value "enus="
          } else {
            Add-Content -Path $env:GITHUB_OUTPUT -Value "found=true"
            Add-Content -Path $env:GITHUB_OUTPUT -Value "engb=$enGB"
            Add-Content -Path $env:GITHUB_OUTPUT -Value "enus=$enUS"
          }

      - name: Debug workflow outputs
        run: |
          echo "should_run=${{ steps.gate.outputs.should_run }}"
          echo "next_epoch=${{ steps.gate.outputs.next_epoch }}"
          echo "found=${{ steps.gen.outputs.found }}"
          echo "engb=${{ steps.gen.outputs.engb }}"
          echo "enus=${{ steps.gen.outputs.enus }}"

      - name: Replace isoUrl entries in Windows11Upgrade.ps1
        if: steps.gate.outputs.should_run == 'true' && steps.gen.outputs.found == 'true'
        env:
          ENGB: ${{ steps.gen.outputs.engb }}
          ENUS: ${{ steps.gen.outputs.enus }}
        shell: pwsh
        run: |
          $file = Join-Path $Env:GITHUB_WORKSPACE 'Windows11Upgrade.ps1'
          if (-not (Test-Path $file)) { Write-Host "Windows11Upgrade.ps1 not found"; exit 1 }
          $content = Get-Content -Raw -Path $file

          $patternENGB = '(?ms)(if\s*\(\$locale\s*-eq\s*"en-GB"\)\s*\{.*?\$isoUrl\s*=\s*)".*?"'
          $patternENUS = '(?ms)(if\s*\(\$locale\s*-eq\s*"en-US"\)\s*\{.*?\$isoUrl\s*=\s*)".*?"'

          $new = $content
          if ($Env:ENGB) {
            $replacement = '${1}"' + $Env:ENGB + '"'
            $new = [Regex]::Replace($new, $patternENGB, $replacement)
            Write-Host "Prepared en-GB replacement"
          } else {
            Write-Host "No en-GB URL available; skipping en-GB replacement"
          }
          if ($Env:ENUS) {
            $replacement = '${1}"' + $Env:ENUS + '"'
            $new = [Regex]::Replace($new, $patternENUS, $replacement)
            Write-Host "Prepared en-US replacement"
          } else {
            Write-Host "No en-US URL available; skipping en-US replacement"
          }

          if ($content -ne $new) {
            Set-Content -Path $file -Value $new -Force
            Write-Host "Windows11Upgrade.ps1 updated"
          } else {
            Write-Host "No changes needed"
          }

      - name: Commit and push changes
        if: steps.gate.outputs.should_run == 'true'
        shell: pwsh
        run: |
          $epochFile = Join-Path $env:GITHUB_WORKSPACE '.github/next_run_epoch'
          $nextEpoch = [int]${{ steps.gate.outputs.next_epoch }}
          Set-Content -Path $epochFile -Value $nextEpoch -Encoding utf8

          git config user.name "github-actions[bot]"
          git config user.email "actions@github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}

          git add Windows11Upgrade.ps1 .github/next_run_epoch
          git diff --staged --quiet
          if ($LASTEXITCODE -eq 0) {
            Write-Host "No changes to commit"
          } else {
            $date = Get-Date -Format 'yyyy-MM-dd HH:mm'
            git commit -m "Refresh Win11 ISO links (next: $nextEpoch) $date"
            git push
          }
